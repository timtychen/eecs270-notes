#+TITLE: Boolean Algebra
#+AUTHOR: Nathan Moos
#+DATE: 2015-09-16
#+LATEX_HEADER: \usepackage{circuitikz}

* Definitions
  
/Disjunction/, or logical OR, will be represented as $+$. /Conjunction/, or 
logical AND, will be represented as $\cdot$.
  
Assume there are at least two distinct elements in the Boolean field $B$:
- Disjunction and conjunction are closed over $B$.
- Disjunction and conjunction are commutative.
- Disjunction and conjunction are associative.
- The identity for disjunction is 0 ($a + 0 = a$).
- The identity for conjunction is 1 ($a \cdot 1 = a$).
- Distributive laws hold for disjunction and conjunction too.
- The *complement*, or logical NOT, of ($a$) is an element of ($B$) that satisfies the following:

($a + a' = 1$) and ($a \cdot a' = 0$).

- The /dual/ can be found by swapping AND and OR and swapping 0 and 1.
  - If both functions are equal, the expression is called /self-dual/.

* Huntington Postulates and Algebraic Laws

Throughout, NOR = NOT OR, NAND = NOT AND. Each of these two gates are
functionally complete, which means you can build any boolean expression (NOT, OR, AND) with only the operation.

*Build using NOR*

NOR($a,b$) = ($a + b$)'

  *NOT*

    $a'$ = ($a + a$)' = NOR($a, a$)

  *OR* 

    $a + b$ = NOR($a,b$)' = NOR[NOR($a,b$),NOR($a,b$)]

  *AND*

    $a \cdot b$ = ($a' + b'$)' = NOR($a',b'$) = NOR[NOR($a,a$),NOR($b,b$)]

*Build using NAND*

NAND($a,b$) = ($a \cdot b$)'

  *NOT*

    $a'$ = ($a \cdot a$)' = NAND($a,a$)

  *AND*

    $a \cdot b$ = NAND($a,b$)' = NAND[NAND($a,b$),NAND($a,b$)]

  *OR*

    $a + b$ = ($a' \cdot b'$)' = NAND($a',b'$) = NAND[NAND($a,a$),NAND($b,b$)]

Given an element $x \in B$, we can draw circuit switches to represent various laws:

- Two-switch identity gates :: a two-switch OR/AND gate could be reduced to a single
switch if one of the switches is always 0/1.

  $a + 0$ = $a$

  $a \cdot 1$ = $a$

- Idempotence Laws :: If two switches are coupled, they can be reduced to a
single switch.

  $a + a$ = $a$

  $a \cdot a$ = $a$

- Involution Laws :: If the NOT operation is applied twice in a row, the inverters
can be eliminated.

  ($a'$)' = $a$

- Complementarity Laws :: A complement can be reduced to a constant gate.

  $a + a'$ = 1

  $a \cdot a'$ = 0

- Commutative Laws :: We can switch the direction of any two gates either ORed
or ANDed to each other.

  $a + b$ = $b + a$

  $a \cdot b$ = $b \cdot a$

- Associative Laws :: Two back-to-back two-input gates can be reduced to a single
three-input gate.

  ($a + b$) + $c$ = $a$ + ($b + c$) = $a + b + c$

  ($a \cdot b$) $\cdot c$ = $a \cdot$ ($b \cdot c$) = $a \cdot b \cdot c$

- DeMorgan's Laws :: AND \equiv NOR, OR \equiv NAND

* Basic Theorems
  
** Consensus Theorems
   
Goal: to minimize the number of required transistors.

Statement: 

  ($a \cdot b$) + ($b \cdot c$) + ($a' \cdot c$) = ($a \cdot b$) + ($a' \cdot c$)

  ($a + b$) $\cdot$ ($b + c$) $\cdot$ ($a' + c$) = ($a + b$) $\cdot$ ($a' + c$)

In a sense, the middle gate is unnecessary. Proof is provided in the course
pack.

* Proving Techniques
  
*NOTE:* Whenever writing proofs, write /all the steps/. This will make it much
easier to write programs from mathematical descriptions.

* The Carry Function for a Full Adder
  
This function is self-dual. 

$C_{out} = A \cdot B + B \cdot C_{in} + C_{in} \cdot A$

* Common Logic Gates
  
When drawing gates, a small bubble indicates logical NOT.

Outputs 1 when:

- AND :: Both inputs are 1.
- OR :: At least one input is 1.
- NAND :: NOT + AND 
- NOR :: NOT + OR
- XOR :: Only one of the inputs is 1. Test for difference.
- XNOR :: Both inputs are the same. Tests for equivalence.
- Inverter (NOT) :: Input is 0. (Inverts input)
- Buffer :: Input is 1. (Returns input)

** Common functions in terms of binary gates

- Inhibition :: $a \cdot b'$
                
** XOR/XNOR

$a$ XOR $b$ = $a' \cdot b$ + $a \cdot b'$

$a$ XNOR $b$ = $a \cdot b$ + $a' \cdot b'$

XOR and XNOR gates could be built from NAND gates. First we define each operation
in terms of NAND, as shown in above sections.

    $a'$ = ($a \cdot a$)' = NAND($a,a$)

    $a \cdot b$ = NAND($a,b$)' = NAND[NAND($a,b$),NAND($a,b$)]

    $a + b$ = ($a' \cdot b'$)' = NAND($a',b'$) = NAND[NAND($a,a$),NAND($b,b$)]

Then, using these operations we can build XOR

  $a$ XOR $b$ = $a' \cdot b$ + $a \cdot b'$ = (NAND($a,a$) $\cdot b$) + ($a \cdot$ NAND($b,b$)) =

  NAND{NAND[NAND($a,a$), $b$],NAND[NAND($a,a$), $b$]} + NAND{NAND[ $a$,NAND($b,b$)],NAND[ $a$,NAND($b,b$)]} =

  NAND(NAND{NAND[NAND($a,a$), $b$],NAND[NAND($a,a$), $b$]},NAND{NAND[NAND($a,a$), $b$],NAND[NAND($a,a$), $b$]}) + 

  NAND(NAND{NAND[ $a$,NAND($b,b$)],NAND[ $a$,NAND($b,b$)]},NAND{NAND[ $a$,NAND($b,b$)],NAND[ $a$,NAND($b,b$)]})

and XNOR

  $a$ XNOR $b$ = $a \cdot b$ + $a' \cdot b'$ = $a \cdot b$ + NAND($a,a$) $\cdot$ NAND($b,b$) =

  NAND[NAND($a,b$),NAND($a,b$)] + NAND{NAND[NAND($a,a$),NAND($b,b$)],NAND[NAND($a,a$),NAND($b,b$)]} =

  NAND[NAND{NAND[NAND($a,b$),NAND($a,b$)],NAND[NAND($a,b$),NAND($a,b$)]},
NAND(NAND{NAND[NAND($a,a$),NAND($b,b$)],NAND[NAND($a,a$),NAND($b,b$)]},NAND{NAND[NAND($a,a$),NAND($b,b$)],NAND[NAND($a,a$),NAND($b,b$)]})]

** Inverter

An inverter can be made with a NAND gate where both inputs are given the same value. It bahaves like a NOT gate.

$a'$ = ($a \cdot a$)' = NAND($a,a$)

* CMOS Switches

The "C" in "CMOS" refers to "complementary" -- there are two types of switch:
PMOS and NMOS. The PMOS is connnected to the Vdd (supply voltage), and the
NMOS is connected to ground.

When input = 0:

PMOS = ON | NMOS = OFF | OUTPUT = HIGH (PMOS pulls node to Vdd)

When input = 1: 

PMOS = OFF | NMOS = ON | OUTPUT = LOW (NMOS pulls node to ground)


